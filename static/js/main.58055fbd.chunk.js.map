{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","api/api.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","BASE_URL","getMovie","a","fetch","response","json","result","Response","Error","FindMovie","addMovie","useState","foundMovie","setMovie","setTitle","error","setError","findMovie","newMovie","Title","Plot","Poster","imdbID","onSubmit","event","preventDefault","some","htmlFor","type","id","placeholder","classNames","value","onChange","target","autoComplete","onClick","App","setMovies","length","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.58055fbd.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","const BASE_URL = 'https://www.omdbapi.com/?apikey=52d8d4e6';\n\nexport async function getMovie(title) {\n  const response = await fetch(`${BASE_URL}&t=[${title}]`);\n\n  const result = await response.json();\n\n  if (result.Response === 'False') {\n    throw new Error(`No movie found. Please choose another one!`);\n  }\n\n  return result;\n}\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport propTypes from 'prop-types';\n\nimport { MovieCard } from '../MovieCard';\nimport { getMovie } from '../../api/api';\n\nexport const FindMovie = ({ addMovie, movies }) => {\n  const [foundMovie, setMovie] = useState(null);\n  const [title, setTitle] = useState('');\n  const [error, setError] = useState(false);\n\n  const findMovie = async() => {\n    try {\n      const newMovie = await getMovie(title);\n\n      if (newMovie.Response === 'False') {\n        setError('movie not found');\n        setMovie(null);\n\n        return;\n      }\n\n      setMovie({\n        title: newMovie.Title,\n        description: newMovie.Plot,\n        imgUrl: newMovie.Poster,\n        imdbUrl: `https://www.imdb.com/title/${movies.imdbId}`,\n        imdbId: movies.imdbID,\n      });\n    } catch (err) {\n      setError(true);\n    }\n  };\n\n  const handleChange = (event) => {\n    if (event.target.value !== title) {\n      setError(false);\n    }\n\n    setTitle(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (movies.some(movie => movie.imdbId === foundMovie.imdbId)) {\n      setError('The movie is already on the list');\n\n      return;\n    }\n\n    addMovie(foundMovie);\n    setMovie(null);\n    setTitle('');\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', { 'is-danger': error })}\n              value={title}\n              onChange={handleChange}\n              autoComplete=\"off\"\n            />\n          </div>\n          {error && (\n            <p className=\"help is-danger\">\n              {error}\n            </p>\n          )}\n        </div>\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={findMovie}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-primary\"\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        {foundMovie && (\n          <MovieCard {...foundMovie} />\n        )\n        }\n      </div>\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  addMovie: propTypes.func.isRequired,\n  movies: propTypes.arrayOf(propTypes.shape({\n    title: propTypes.string.isRequired,\n    description: propTypes.string.isRequired,\n    imgUrl: propTypes.string.isRequired,\n  })).isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState([]);\n\n  const addMovie = (newMovie) => {\n    setMovies(currentMovies => [...currentMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        {movies.length\n          ? <MoviesList movies={movies} />\n          : (\n            <h2>\n              Add your movies\n            </h2>\n          )\n        }\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          addMovie={addMovie}\n          movies={movies}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}